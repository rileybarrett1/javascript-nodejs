const NodeCache = require('node-cache');
const cache = new NodeCache();
Middleware to cache responses
function cacheMiddleware(req, res, next) {
    const key = req.originalUrl || req.url;
    // Check if sensitive data is present in the request or response
    const sensitiveData = req.body.password || res.body.ssn;
    // Adjust as per your data model
    if (sensitiveData) { console.log('Sensitive data detected, not caching');
        return next(); }
        // Append version identifier for cache busting
        const version = 'v1';
        // Change this based on your versioning strategy
        const cacheKey = `${key}_${version}`;
        const cachedData = cache.get(cacheKey);
        if (cachedData !== undefined) { console.log('Cache hit');
             return res.json(cachedData); }
             else { console.log('Cache miss');
                res.sendResponse = res.json;
                res.json = (body) => { cache.set(cacheKey, body,
                    /* expiration time in seconds */); res.sendResponse(body); }; next(); } }

// Cache segmentation example: separate cache for different user roles
function getUserRoleCacheKey(req) {
    // Example: prepend user role to cache key
    const userRole = req.user.role || 'guest';
    return `${userRole}_${req.originalUrl || req.url}`; }
    // Cache expiration policies based on data volatility
    function getCacheExpirationTime(req) {
        // Example: shorter expiration time for frequently changing data
        if (req.originalUrl.includes('frequently-changing')) { return 60;
            // 1 minute
            }
            else { return 3600;
            // 1 hour for other data
                    } }
module.exports = { cacheMiddleware, getUserRoleCacheKey, getCacheExpirationTime };
